// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelAkademi.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelAkademi.Data.Migrations
{
    [DbContext(typeof(OzelAkademiContext))]
    [Migration("20230515210053_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8c455eb9-154d-4978-9f61-de614570416b",
                            RoleId = "bb699baa-9c56-450f-805e-9d94a049fd23"
                        },
                        new
                        {
                            UserId = "bd3e9102-9085-4c78-a1bf-6db66d30fd13",
                            RoleId = "06ad8358-07d1-486d-9e8a-3d54aa2ff75a"
                        },
                        new
                        {
                            UserId = "0588abca-4ab4-4905-b958-fbb070346b03",
                            RoleId = "bf227cc0-1b37-4cae-9ac0-0ccc5f143b91"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Matematik alanından mezunum.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(402),
                            Description = "Matematik dersi verebilirim",
                            LessonId = 1,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(416),
                            Name = "Matematik Özel Dersi",
                            Price = 200m,
                            TeacherId = 1,
                            Url = "matematik-ozel-dersi"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Fizik alanından mezunum.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(424),
                            Description = "Fizik dersi verebilirim",
                            LessonId = 2,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(425),
                            Name = "Fizik Özel Dersi",
                            Price = 220m,
                            TeacherId = 3,
                            Url = "fizik-ozel-dersi"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Kimya alanından mezunum.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(427),
                            Description = "Kimya dersi verebilirim",
                            LessonId = 3,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(428),
                            Name = "Kimya Özel Dersi",
                            Price = 210m,
                            TeacherId = 2,
                            Url = "kimya-ozel-dersi"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Biyoloji öğretmeniyim.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(430),
                            Description = "Biyoloji dersi verebilirim",
                            LessonId = 4,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(430),
                            Name = "Biyoloji Özel Dersi",
                            Price = 250m,
                            TeacherId = 4,
                            Url = "biyoloji-ozel-dersi"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Tarih alanında deneyimliyim.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(432),
                            Description = "Tarih dersi verebilirim",
                            LessonId = 15,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(432),
                            Name = "Tarih Özel Dersi",
                            Price = 280m,
                            TeacherId = 3,
                            Url = "tarih-ozel-dersi"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Müzik öğretmeniyim.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(434),
                            Description = "Müzik dersi verebilirim",
                            LessonId = 18,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(435),
                            Name = "Müzik Özel Dersi",
                            Price = 320m,
                            TeacherId = 1,
                            Url = "muzik-ozel-dersi"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Edebiyat alanında uzmanım.",
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(437),
                            Description = "Edebiyat dersi verebilirim",
                            LessonId = 12,
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(437),
                            Name = "Edebiyat Özel Dersi",
                            Price = 280m,
                            TeacherId = 2,
                            Url = "edebiyat-ozel-dersi"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb699baa-9c56-450f-805e-9d94a049fd23",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "06ad8358-07d1-486d-9e8a-3d54aa2ff75a",
                            Description = "Öğretmen",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "bf227cc0-1b37-4cae-9ac0-0ccc5f143b91",
                            Description = "Öğrenci",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "0588abca-4ab4-4905-b958-fbb070346b03"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = false,
                            UserId = "bd3e9102-9085-4c78-a1bf-6db66d30fd13"
                        },
                        new
                        {
                            Id = 2,
                            IsApproved = false,
                            UserId = "7a3a52e5-7314-4bc6-bd6d-8a1f8a019af0"
                        },
                        new
                        {
                            Id = 3,
                            IsApproved = false,
                            UserId = "6258e3a1-287d-4291-9e9d-610ae12961a2"
                        },
                        new
                        {
                            Id = 4,
                            IsApproved = false,
                            UserId = "3b9d102e-bd3b-4123-9f83-66e638f5401a"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c455eb9-154d-4978-9f61-de614570416b",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "441b2d29-49f0-482b-8c2d-ceb6e2fb6826",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "admin",
                            District = "Küçükçekmece",
                            Email = "cem@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            IsApproved = false,
                            LastName = "ADmin",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "CEM@HOTMAIL.COM",
                            NormalizedName = "ADMINCEM",
                            NormalizedUserName = "CEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5KIR/U3VdHywgiugthvAmLKU5aFFqsUjKvrWZ7n3BOKo6HEyfFBhH1GCIWgCGpKQ==",
                            PhoneNumberConfirmed = false,
                            Place = "Online",
                            SecurityStamp = "4ba9c8dc-53f1-4f9a-b8aa-925a53ac550f",
                            TwoFactorEnabled = false,
                            UserName = "cem"
                        },
                        new
                        {
                            Id = "bd3e9102-9085-4c78-a1bf-6db66d30fd13",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "5faafe10-57d0-496b-a894-cb1221ea5870",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öğretmenim",
                            District = "Beşiktaş",
                            Email = "ali@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            IsApproved = false,
                            LastName = "Aktaş",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ALI@HOTMAIL.COM",
                            NormalizedName = "OGRETMENALI",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEJae6XeRhDAEhOiycJ4E8CdfByJmgURbnauUqsX8yuJ4FVUphPMXsylfrNfoZK7O8Q==",
                            PhoneNumberConfirmed = false,
                            Place = "Online",
                            SecurityStamp = "dfdf9b1e-0c9a-440a-b663-f42902576b65",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = "0588abca-4ab4-4905-b958-fbb070346b03",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "84774bba-ca82-4a02-9796-a379a8ec81d3",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öğrenciyim",
                            District = "Fatih",
                            Email = "veli@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Veli",
                            Gender = "Erkek",
                            IsApproved = false,
                            LastName = "Sarı",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "VELI@HOTMAIL.COM",
                            NormalizedName = "OGRENCIVELI",
                            NormalizedUserName = "VELI",
                            PasswordHash = "AQAAAAIAAYagAAAAEMf+kQAdCZe2PtJODl94HwKbuAc+ivyfi/fzl/tQqZ52IfsryZPol8ETRv//sN0pHQ==",
                            PhoneNumberConfirmed = false,
                            Place = "Online",
                            SecurityStamp = "c6f4b8d3-ab29-4572-b494-c2b2527d8c8f",
                            TwoFactorEnabled = false,
                            UserName = "veli"
                        },
                        new
                        {
                            Id = "7a3a52e5-7314-4bc6-bd6d-8a1f8a019af0",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "cb74d8ec-634c-497a-8873-79437bb6b4d0",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1995, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öğretmenim",
                            District = "Çankaya",
                            Email = "ayse@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            IsApproved = false,
                            LastName = "Ertaş",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ayse@gmail.com",
                            NormalizedName = "OGRENCIAYSE",
                            NormalizedUserName = "AYSE",
                            PhoneNumberConfirmed = false,
                            Place = "Fiziksel",
                            SecurityStamp = "5ca1d0d7-8884-4d54-91af-c57c48c67178",
                            TwoFactorEnabled = false,
                            UserName = "ayse"
                        },
                        new
                        {
                            Id = "6258e3a1-287d-4291-9e9d-610ae12961a2",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "03e8a8d6-ac33-4799-ac7c-3570b09529ec",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1988, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öğretmenim",
                            District = "Kadıköy",
                            Email = "mehmet@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            IsApproved = false,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "mehmet@gmail.com",
                            NormalizedName = "OGRETMENMEHMET",
                            NormalizedUserName = "MEHMET",
                            PhoneNumberConfirmed = false,
                            Place = "Fiziksel",
                            SecurityStamp = "9d152573-9a59-4bad-8c0e-609664a50816",
                            TwoFactorEnabled = false,
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = "3b9d102e-bd3b-4123-9f83-66e638f5401a",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "faa8be0c-a6d5-49a2-bbe0-26632fd50c48",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öğretmenim",
                            District = "Beşiktaş",
                            Email = "ekin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ekin",
                            Gender = "Kadın",
                            IsApproved = false,
                            LastName = "Cömert",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ekin@hotmail.com",
                            NormalizedName = "OGRETMENEKIN",
                            NormalizedUserName = "EKIN",
                            PhoneNumberConfirmed = false,
                            Place = "Online",
                            SecurityStamp = "ccaf0e9c-b4f2-4043-98f3-69373422ac0d",
                            TwoFactorEnabled = false,
                            UserName = "ekin"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2732),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2736),
                            Url = "1.jpg",
                            UserId = "8c455eb9-154d-4978-9f61-de614570416b"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2737),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2738),
                            Url = "3.jpg",
                            UserId = "bd3e9102-9085-4c78-a1bf-6db66d30fd13"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2739),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2739),
                            Url = "4.jpg",
                            UserId = "0588abca-4ab4-4905-b958-fbb070346b03"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2741),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2741),
                            Url = "2.jpg",
                            UserId = "7a3a52e5-7314-4bc6-bd6d-8a1f8a019af0"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2742),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2742),
                            Url = "5.jpg",
                            UserId = "6258e3a1-287d-4291-9e9d-610ae12961a2"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2744),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(2744),
                            Url = "6.jpg",
                            UserId = "3b9d102e-bd3b-4123-9f83-66e638f5401a"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4491),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4494),
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4497),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4501),
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4513),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4513),
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4514),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4515),
                            Name = "Biyoloji",
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4516),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4517),
                            Name = "İngilizce",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4518),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4518),
                            Name = "Almanca",
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4519),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4520),
                            Name = "Fransızca",
                            Url = "fransızca"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4521),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4521),
                            Name = "İspanyolca",
                            Url = "ispanyolca"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4522),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4523),
                            Name = "İtalyanca",
                            Url = "italyanca"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4524),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4524),
                            Name = "Japonca",
                            Url = "japonca"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4525),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4526),
                            Name = "Çince",
                            Url = "cince"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4527),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4527),
                            Name = "Türkçe",
                            Url = "turkce"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4528),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4529),
                            Name = "Sosyal bilimler",
                            Url = "sosyal-bilimler"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4530),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4530),
                            Name = "Tarih",
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4531),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4532),
                            Name = "Coğrafya",
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4533),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4533),
                            Name = "Sanat tarihi",
                            Url = "sanat-tarihi"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4534),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4535),
                            Name = "Müzik",
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4536),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4537),
                            Name = "Resim",
                            Url = "resim"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4538),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4538),
                            Name = "Dans",
                            Url = "dans"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4539),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4540),
                            Name = "Drama",
                            Url = "drama"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4541),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4541),
                            Name = "Üniversite sınavı hazırlık dersleri",
                            Url = "üniversite-sınavı-hazırlık-dersleri"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4542),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4543),
                            Name = "Dil sınavı hazırlık dersleri",
                            Url = "dil-sınavı-hazırlık-dersleri"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4544),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4545),
                            Name = "Programlama dilleri",
                            Url = "programlama-dilleri"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4546),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4546),
                            Name = "İşletme ve finans dersleri",
                            Url = "işletme-ve-finans-dersleri"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4547),
                            ModifiedDate = new DateTime(2023, 5, 16, 0, 0, 53, 120, DateTimeKind.Local).AddTicks(4548),
                            Name = "Mühendislik dersleri",
                            Url = "mühendislik-dersleri"
                        });
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("OzelAkademi.Entity.Concrete.Lesson", "Lesson")
                        .WithMany("Adverts")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Student", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("OzelAkademi.Entity.Concrete.Identity.Student", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Teacher", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("OzelAkademi.Entity.Concrete.Identity.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Image", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("OzelAkademi.Entity.Concrete.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Order", b =>
                {
                    b.HasOne("OzelAkademi.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelAkademi.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.Teacher", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelAkademi.Entity.Concrete.Lesson", b =>
                {
                    b.Navigation("Adverts");
                });
#pragma warning restore 612, 618
        }
    }
}
